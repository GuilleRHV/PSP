package Actividad1x10v2;

import java.util.Random;
import java.util.concurrent.Semaphore;

public class Act10 {
    public static void main(String[] args) {
        Semaphore semaforoAtencion = new Semaphore(1);
        Semaphore semaforoSalida = new Semaphore(0);

        Frutero frutero = new Frutero(semaforoAtencion, semaforoSalida);
        frutero.start();

        // Crear un número aleatorio de clientes
        Random rand = new Random();
        int numClientes = rand.nextInt(10) + 1; // Entre 1 y 10 clientes

        Cliente[] clientes = new Cliente[numClientes];
        for (int i = 0; i < numClientes; i++) {
            clientes[i] = new Cliente(semaforoAtencion, semaforoSalida);
            clientes[i].start();
        }

        try {
            // Esperar a que todos los clientes hayan finalizado
            for (Cliente cliente : clientes) {
                cliente.join();
            }

            // Interrumpir la ejecución del frutero
            frutero.interrupt();
            frutero.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}







class Frutero extends Thread {
    private long tiempoTotal = 0;
    private Semaphore semaforoAtencion;
    private Semaphore semaforoSalida;
    private int totalTiempo;
    private double totalCaja;
    
    public Frutero(Semaphore semaforoAtencion, Semaphore semaforoSalida) {
        this.semaforoAtencion = semaforoAtencion;
        this.semaforoSalida = semaforoSalida;
        this.totalTiempo = 0;
        this.totalCaja = 0.0;
    }

    @Override
    public void run() {
        try {
            while (true) {
                System.out.println("______________\nFrutero espera a q salga cliente");
                
                semaforoSalida.acquire(); // Esperar a que el cliente salga de la tienda
                
                //System.out.println("Frutero charla con cliente");
                
                // Simular tiempo de espera aleatorio
                int esperaTiempo=(int) (Math.random() * 1500 + 1000);
                Thread.sleep(esperaTiempo);
                System.out.println("Tiempo de espera: "+esperaTiempo);
                // Simular importe a pagar por el cliente
                double importe = Math.random() * 5 + 1;
                
                System.out.println("Cuenta generada precio: " + importe);

                totalTiempo += esperaTiempo;
                totalCaja += importe;
                semaforoAtencion.release(); // Indicar que está disponible para atender
            }

        } catch (InterruptedException e) {
            System.out.println("Frutería cerrada por falta de clientes. Tiempo total: " + tiempoTotal +
                    ". Total caja: " + totalCaja);
        }
    }

}












class Cliente extends Thread {
    private static int contadorClientes = 1;
    private int numeroCliente;
    private Semaphore semaforoAtencion;
    private Semaphore semaforoSalida;

    public Cliente(Semaphore semaforoAtencion, Semaphore semaforoSalida) {
        this.numeroCliente = contadorClientes++;
        this.semaforoAtencion = semaforoAtencion;
        this.semaforoSalida = semaforoSalida;
    }

    @Override
    public void run() {
        try {
            System.out.println("Cliente " + numeroCliente + " espera su turno");
            semaforoAtencion.acquire(); // Esperar para ser atendido
            System.out.println("Cliente " + numeroCliente + " es atendido");

            semaforoSalida.release(); // Cliente puede salir de la tienda
            System.out.println("Cliente " + numeroCliente + " sale de la tienda");
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
